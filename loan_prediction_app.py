# -*- coding: utf-8 -*-
"""Loan_Prediction_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19KuKUxJTz0kGFfS70CQjvnVh9bNzNlfS
"""

import streamlit as st
import pandas as pd
import joblib
import numpy as np
import xgboost as xgb


# Load the models and scaler
xgb_model = joblib.load('xgb_mode_loan.pkl')
scaler = joblib.load('scaler_loan.pkl')
feature_names = joblib.load('feature_names.pkl')  # Load feature names from training

# Function to preprocess the user input and make predictions
def preprocess_input(data):
    # Convert categorical variables
    categorical_columns = ['Occupation', 'Payment_Behaviour']
    data = pd.get_dummies(data, columns=categorical_columns, drop_first=True)  # Encoding the categorical column

    # Align columns with training set
    data = data.reindex(columns=feature_names, fill_value=0)


    # Scale the data
    data_scaled = scaler.transform(data)
    return data_scaled

def predict(x):
    # Predict with XGBoost Model
    xgb_pred = xgb_model.predict(x)



    return xgb_pred

# Streamlit App Layout
st.title("üè¶ üí∞Loan Prediction App ü§ñüìä")

st.write("Please input the details to predict whether a loan application will be accepted:")

# Create input fields
age = st.number_input("Age", min_value=14, max_value=56, value=33)
Credit_History_Age = st.number_input("Credit_History_Age", min_value=0, max_value=34, value=19)
Annual_Income = st.number_input("Annual_Income", min_value=7000, max_value=149000, value=39000)
Num_of_Delayed_Payment = st.number_input("Num_of_Delayed_Payment", min_value=-3, max_value=28, value=13)
Num_of_Loan = st.number_input("Num_of_Loan", min_value=0, max_value=20, value=5)
Changed_Credit_Limit = st.number_input("Changed_Credit_Limit", min_value=0, max_value=30, value=10)
Num_Credit_Inquiries = st.number_input("Num_Credit_Inquiries", min_value=0, max_value=15, value=5)

# Add the occupation field (categorical input)
Occupation = st.selectbox("Occupation", ['Accountant', 'Architect', 'Developer', 'Doctor', 'Engineer',
                                         'Entrepreneur', 'Journalist','Lawyer','Manager','Mechanic',
                                         'Media_Manager','Musician','Scientist','Teacher','Writer'])
Payment_Behaviour = st.selectbox("Payment_Behaviour", ['Low_spent_Small_value_payments','High_spent_Medium_value_payments',
                                                       'Low_spent_Medium_value_payments','High_spent_Large_value_payments',
                                                       'Low_spent_Large_value_payments'])

# Additional user input (if needed)
user_input = {
    'Age': [age],
    'Credit_History_Age': [Credit_History_Age],
    'Annual_Income': [Annual_Income],
    'Num_of_Delayed_Payment': [Num_of_Delayed_Payment],
    'Num_of_Loan' : [Num_of_Loan],
    'Changed_Credit_Limit': [Changed_Credit_Limit],
    'Num_Credit_Inquiries': [Num_Credit_Inquiries],
    'Occupation': [Occupation],
    'Payment_Behaviour': [Payment_Behaviour]
}

# Convert user input to DataFrame
input_df = pd.DataFrame(user_input)

# Preprocess the input
input_scaled = preprocess_input(input_df)

# Button to trigger the prediction
if st.button("Predict"):
    # Make predictions using model
    xgb_pred = predict(input_scaled)

    # Display the predictions
    st.write("XGBoost Prediction: ", "Approved" if xgb_pred[0] == 1 else "Rejected")